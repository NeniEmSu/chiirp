import { SignInButton, useUser } from "@clerk/nextjs";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { api, type RouterOutputs } from "~/utils/api";

import Link from "next/link";
import { useState } from "react";
import toast from "react-hot-toast";
import { LoadingPage, LoadingSpinner } from "~/components/loading";

dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const { user } = useUser();

  const [input, setInput] = useState("");

  const ctx = api.useContext();

  const { mutate: createPost, isLoading: isPosting } =
    api.posts.create.useMutation({
      onSuccess: () => {
        setInput("");
        void ctx.posts.getAll.invalidate();
      },
      onError: (err) => {
        toast.error(
          err.data?.zodError?.fieldErrors?.content?.[0] ||
            "Something went wrong"
        );
      },
    });

  if (!user) return null;

  return (
    <div className="flex w-full gap-3">
      <Image
        src={user?.profileImageUrl}
        alt={user?.username || "User"}
        className="h-12 w-12 rounded-full"
        width={48}
        height={48}
      />
      <input
        placeholder="Type some emojis and click enter to post!"
        className="grow bg-transparent outline-none"
        type="text"
        name="emoji"
        id="emoji"
        value={input}
        onChange={(e) => setInput(e.currentTarget.value)}
        onKeyDown={(e) => {
          e.preventDefault();
          if (e.key === "Enter") {
            createPost({ content: e.currentTarget.value });
          }
        }}
        disabled={isPosting}
      />
      {input !== "" && !isPosting && (
        <button
          type="submit"
          className="rounded-md border-2 bg-transparent px-6 py-2 text-white transition-colors duration-200 hover:border-slate-400 hover:text-slate-400"
          onClick={() => {
            createPost({ content: input });
          }}
          disabled={isPosting}
        >
          Post
        </button>
      )}
      {isPosting && (
        <div className="flex items-center justify-center">
          <LoadingSpinner />
        </div>
      )}
    </div>
  );
};

type PostWithUser = RouterOutputs["posts"]["getAll"][number];
const PostView = ({ post }: { post: PostWithUser }) => {
  if (!post) return null;

  return (
    <div className="flex gap-3 border-b border-slate-400 p-4">
      <Link href={`/@${post?.authorName || "Author"}`}>
        <Image
          src={post?.authorProfileImageUrl}
          alt={post?.authorName || "Author name"}
          className="h-12 w-12 rounded-full"
          width={48}
          height={48}
        />
      </Link>
      <div className="flex flex-col">
        <div className="flex gap-1 text-slate-300">
          <Link href={`/@${post?.authorName || "Author"}`}>
            {" "}
            <span className="text-bold">{`@${
              post.authorName || "Author name"
            } `}</span>
          </Link>
          <Link href={`/post/${post?.id}`}>
            <span className="font-thin">{` Â· ${dayjs(
              post.createdAt
            ).fromNow()}`}</span>
          </Link>
        </div>
        <p className="text-2xl">{post.content}</p>
      </div>
    </div>
  );
};

const Feed = () => {
  const { data, isLoading, isError } = api.posts.getAll.useQuery();

  if (isLoading) return <LoadingPage />;

  if (isError) return <div>Something went wrong</div>;

  if (!data) return <div>Something went wrong</div>;

  return (
    <div className="">
      {data?.map((post) => (
        <PostView key={post.id} post={post} />
      ))}
    </div>
  );
};

const Home: NextPage = () => {
  const { isLoaded, isSignedIn } = useUser();

  //start fetching posts as soon as the page loads
  api.posts.getAll.useQuery();

  if (!isLoaded) return <div></div>;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="h-full w-full border-x md:max-w-2xl">
          <div className="flex border-b border-slate-400 p-4">
            {isSignedIn ? (
              <CreatePostWizard />
            ) : (
              <div className="flex justify-center">
                <SignInButton />{" "}
              </div>
            )}
          </div>
          <Feed />
        </div>
      </main>
    </>
  );
};

export default Home;
